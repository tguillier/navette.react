{"version":3,"sources":["index.js"],"names":["readers","barcodeReader","logMsgElement","readerSelect","openButton","closeButton","activateButton","deactivateButton","addEventListenerButton","enableTriggerButton","barcodeDataText","symbTypeText","readTimeText","hidden","visibilityChange","readerAutoClosed","onBarcodeReadersComplete","result","status","getAvailableBarcodeReaders","onGetAvailableBarcodeReadersComplete","innerHTML","message","onBarcodeReaderComplete","updateUI","setBuffered","onSetBufferedComplete","commitBuffer","onCommitComplete","addRemoveBarcodeListener","window","addEventListener","onBeforeUnload","alert","family","key","option","resultArray","length","i","method","onBarcodeDataReady","data","type","time","value","readerOpened","clearData","disabled","handleVisibilityChange","document","closeBarcodeReader","openBarcodeReader","scannerName","BarcodeReader","isAutoClose","close","removeEventListener","added","selectOptions","e","event","returnValue","getElementById","BarcodeReaders","webkitHidden","className","htmlFor","id","onclick","size","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.36ccffd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nvar readers, barcodeReader, readerAutoClosed = false;\r\nvar logMsgElement, readerSelect, openButton, closeButton, activateButton, deactivateButton, addEventListenerButton, enableTriggerButton, clearLogButton;\r\nvar barcodeDataText, symbTypeText, readTimeText;\r\nvar hidden, visibilityChange;\r\n\r\nfunction setup() {\r\n    readerSelect = window.document.getElementById(\"readerSelect\")\r\n    openButton = document.getElementById(\"openButton\");\r\n    closeButton = document.getElementById(\"closeButton\");\r\n    activateButton = document.getElementById(\"activateButton\");\r\n    deactivateButton = document.getElementById(\"deactivateButton\");\r\n    addEventListenerButton = document.getElementById(\"addEventListenerButton\");\r\n    enableTriggerButton = document.getElementById(\"enableTriggerButton\");\r\n    clearLogButton = document.getElementById(\"clearLogButton\");\r\n    logMsgElement = document.getElementById(\"logMsg\");\r\n    barcodeDataText = document.getElementById(\"BarcodeData\");\r\n    symbTypeText = document.getElementById(\"SymbType\");\r\n    readTimeText = document.getElementById(\"ReadTime\");\r\n\r\n    // Create a BarcodeReaders object to query the list of available readers later.\r\n    readers = new window.BarcodeReaders(onBarcodeReadersComplete);\r\n\r\n    // Check whether the browser supports detection of the web page visibility.\r\n    if (typeof document.webkitHidden !== \"undefined\") { // Android 4.4 Chrome\r\n        hidden = \"webkitHidden\";\r\n        visibilityChange = \"webkitvisibilitychange\";\r\n    }\r\n    else if (typeof document.hidden !== \"undefined\") { // Standard HTML5 attribute\r\n        hidden = \"hidden\";\r\n        visibilityChange = \"visibilitychange\";\r\n    }\r\n\r\n    if (hidden && typeof document.addEventListener !== \"undefined\" &&\r\n        typeof document[hidden] !== \"undefined\") {\r\n        // Add an event listener for the visibility change of the web page.\r\n        document.addEventListener(visibilityChange, handleVisibilityChange, false);\r\n    }\r\n}\r\n\r\nfunction onBarcodeReadersComplete(result) {\r\n    if (result.status === 0) {\r\n        readers.getAvailableBarcodeReaders(onGetAvailableBarcodeReadersComplete);\r\n    }\r\n    else {\r\n        logMsgElement.innerHTML = \"<p style=\\\"color:red\\\">Failed to create BarcodeReaders, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n    }\r\n}\r\n\r\n// After BarcodeReader object is created we can configure our symbologies and add our event listener\r\nfunction onBarcodeReaderComplete(result) {\r\n    if (result.status === 0) {\r\n        // BarcodeReader object was successfully created\r\n        logMsgElement.innerHTML = \"BarcodeReader object successfully created\";\r\n        updateUI(true, true);\r\n\r\n        // Configure the symbologies needed. Buffer the settings and commit them at once.\r\n        barcodeReader.setBuffered(\"Symbology\", \"Code39\", \"Enable\", \"true\", onSetBufferedComplete);\r\n        barcodeReader.setBuffered(\"Symbology\", \"Code128\", \"EnableCode128\", \"true\", onSetBufferedComplete);\r\n        barcodeReader.setBuffered(\"Symbology\", \"EANUPC\", \"EnableEAN13\", \"true\", onSetBufferedComplete);\r\n        barcodeReader.setBuffered(\"Symbology\", \"QRCode\", \"Enable\", \"true\", onSetBufferedComplete);\r\n\r\n        barcodeReader.commitBuffer(onCommitComplete);\r\n\r\n        // Add an event handler to receive barcode data\r\n        addRemoveBarcodeListener(true);\r\n        // Add an event handler for the window's beforeunload event\r\n        window.addEventListener(\"beforeunload\", onBeforeUnload);\r\n    }\r\n    else {\r\n        barcodeReader = null;\r\n        logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">Failed to create BarcodeReader, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n        alert('Failed to create BarcodeReader, ' + result.message);\r\n    }\r\n}\r\n\r\n// Verify the symbology configuration\r\nfunction onSetBufferedComplete(result) {\r\n    if (result.status !== 0) {\r\n        logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">setBuffered failed, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n        logMsgElement.innerHTML += \"<p>Family=\" + result.family + \" Key=\" + result.key +\r\n            \" Option=\" + result.option + \"</p>\";\r\n    }\r\n}\r\n\r\nfunction onCommitComplete(resultArray) {\r\n    if (resultArray.length > 0) {\r\n        for (var i = 0; i < resultArray.length; i++) {\r\n            var result = resultArray[i];\r\n            if (result.status !== 0) {\r\n                logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">commitBuffer failed, status: \" +\r\n                    result.status + \", message: \" + result.message + \"</p>\";\r\n                if (result.method === \"getBuffered\" || result.method === \"setBuffered\") {\r\n                    logMsgElement.innerHTML += \"<p>Method=\" + result.method +\r\n                        \" Family=\" + result.family + \" Key=\" + result.key +\r\n                        \" Option=\" + result.option + \"</p>\";\r\n                }\r\n            }\r\n        } //endfor\r\n    }\r\n}\r\n\r\n// Handle barcode data when available\r\nfunction onBarcodeDataReady(data, type, time) {\r\n    barcodeDataText.value = data;\r\n    symbTypeText.value = type;\r\n    readTimeText.value = time;\r\n}\r\n\r\nfunction updateUI(readerOpened, clearData) {\r\n    openButton.disabled = readerOpened;\r\n    closeButton.disabled = !readerOpened;\r\n    activateButton.disabled = !readerOpened;\r\n    deactivateButton.disabled = !readerOpened;\r\n    addEventListenerButton.disabled = !readerOpened;\r\n    enableTriggerButton.disabled = !readerOpened;\r\n    if (clearData) {\r\n        barcodeDataText.value = \"\";\r\n        symbTypeText.value = \"\";\r\n        readTimeText.value = \"\";\r\n    }\r\n}\r\n\r\n/**\r\n * If the browser supports visibility change event, we can close the\r\n * BarcodeReader object when the web page is hidden and create a new\r\n * instance of the BarcodeReader object when the page is visible. This\r\n * logic is used to re-claim the barcode reader in case another\r\n * application has claimed it when this page becomes hidden.\r\n */\r\nfunction handleVisibilityChange() {\r\n    if (document[hidden]) // The web page is hidden\r\n    {\r\n        closeBarcodeReader(true);\r\n    }\r\n    else // The web page is visible\r\n    {\r\n        if (readerAutoClosed) {\r\n            // Note: If you switch to another tab and quickly switch back\r\n            // to the current tab, the following call may have no effect\r\n            // because the BarcodeReader may not be completely closed yet.\r\n            // Once the BarcodeReader is closed, you may use the Open Reader\r\n            // button to create a new BarcodeReader object.\r\n            openBarcodeReader();\r\n        }\r\n    }\r\n}\r\n\r\nfunction openBarcodeReader(scannerName) {\r\n    if (!barcodeReader) {\r\n        barcodeReader = new BarcodeReader(scannerName, onBarcodeReaderComplete);\r\n    }\r\n}\r\n\r\nfunction closeBarcodeReader(isAutoClose) {\r\n    if (barcodeReader) {\r\n        readerAutoClosed = isAutoClose;\r\n        barcodeReader.close(function (result) {\r\n            if (result.status === 0) {\r\n                logMsgElement.innerHTML += \"<p style=\\\"color:blue\\\">BarcodeReader successfully closed.</p>\";\r\n                barcodeReader = null;\r\n                updateUI(false, false);\r\n                window.removeEventListener(\"beforeunload\", onBeforeUnload);\r\n            }\r\n            else {\r\n                logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">Failed to close BarcodeReader, status: \" +\r\n                    result.status + \", message: \" + result.message + \"</p>\";\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction openButtonClicked() {\r\n    var scannerName = readerSelect.options[readerSelect.selectedIndex].value;\r\n    if (scannerName != \"None\") {\r\n        openBarcodeReader(scannerName);\r\n    }\r\n    else {\r\n        openBarcodeReader(null);\r\n    }\r\n}\r\n\r\nfunction closeButtonClicked() {\r\n    closeBarcodeReader(false);\r\n}\r\n\r\nfunction activateButtonClicked() {\r\n    activateBarcodeReader();\r\n}\r\n\r\nfunction deactivateButtonClicked() {\r\n    deactivateBarcodeReader();\r\n}\r\n\r\nfunction addEventListenerButtonClicked() {\r\n    var isAdd = addEventListenerButton.value === \"Remove Listener\" ? false : true;\r\n    addRemoveBarcodeListener(isAdd);\r\n}\r\n\r\nfunction enableTriggerButtonClicked() {\r\n    var enabled = enableTriggerButton.value === \"Disable Trigger\" ? false : true;\r\n    enableTrigger(enabled);\r\n}\r\n\r\nfunction clearLogButtonClicked() {\r\n    logMsgElement.innerHTML = \"\";\r\n}\r\n\r\nfunction activateBarcodeReader() {\r\n    barcodeDataText.value = \"\";\r\n    symbTypeText.value = \"\";\r\n    readTimeText.value = \"\";\r\n\r\n    // The following call should cause the aimer to light up\r\n    // and be ready to decode. This feature is often referred\r\n    // to as starting the software trigger.\r\n    barcodeReader.activate(true, onActivateComplete);\r\n}\r\n\r\nfunction deactivateBarcodeReader() {\r\n    // The following call should deactivate the aimer. This is\r\n    // often referred to as stopping the software trigger.\r\n    barcodeReader.activate(false, onDeactivateComplete);\r\n}\r\n\r\nfunction addRemoveBarcodeListener(added) {\r\n    if (added) {\r\n        // Add an event handler for the barcodedataready event\r\n        barcodeReader.addEventListener(\"barcodedataready\", onBarcodeDataReady, false);\r\n        addEventListenerButton.value = \"Remove Listener\";\r\n        logMsgElement.innerHTML += \"<br>Added an event handler for the barcodedataready event.\";\r\n    }\r\n    else {\r\n        // Remove an event handler for the barcodedataready event\r\n        barcodeReader.removeEventListener(\"barcodedataready\", onBarcodeDataReady);\r\n        addEventListenerButton.value = \"Add Listener\";\r\n        logMsgElement.innerHTML += \"<br>Removed the event handler for the barcodedataready event.\";\r\n    }\r\n}\r\n\r\n// Enables or disables the hardware trigger (scan) button. The user\r\n// will not be able to press the scan button to scan if it is disabled.\r\nfunction enableTrigger(enabled) {\r\n    barcodeReader.enableTrigger(enabled, onEnableTriggerComplete);\r\n}\r\n\r\nfunction onGetAvailableBarcodeReadersComplete(result) {\r\n    if (result.length != 0) {\r\n        var selectOptions;\r\n        for (var i = 0; i < result.length; i++) {\r\n            selectOptions += \"<option value=\\\"\" + result[i] + \"\\\">\" + result[i] + \"</option>\";\r\n        }\r\n        readerSelect.innerHTML = selectOptions;\r\n    }\r\n}\r\n\r\nfunction onActivateComplete(result) {\r\n    if (result.status !== 0) {\r\n        logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">BarcodeReader activate failed, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n    }\r\n}\r\n\r\nfunction onDeactivateComplete(result) {\r\n    if (result.status !== 0) {\r\n        logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">BarcodeReader deactivate failed, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n    }\r\n}\r\n\r\nfunction onEnableTriggerComplete(result) {\r\n    if (result.status !== 0) {\r\n        logMsgElement.innerHTML += \"<p style=\\\"color:red\\\">BarcodeReader enableTrigger failed, status: \" +\r\n            result.status + \", message: \" + result.message + \"</p>\";\r\n    }\r\n    else {\r\n        enableTriggerButton.value = enableTriggerButton.value === \"Disable Trigger\" ? \"Enable Trigger\" : \"Disable Trigger\";\r\n    }\r\n}\r\n\r\nfunction onBeforeUnload(e) {\r\n    var message = \"Please close BarcodeReader before leaving this page.\";\r\n    (e || window.event).returnValue = message;\r\n    return message;\r\n}\r\n\r\nclass BarcodeReader extends React.Component {\r\n    componentDidMount() {\r\n        setup();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"barcode-reader\">\r\n                <h3>BarcodeReader API Demo</h3>\r\n\r\n                <label htmlFor=\"readerSelect\">Readers:</label>\r\n                <select id=\"readerSelect\">\r\n                    <option value=\"None\">Select a reader</option>\r\n                </select>\r\n                <br />\r\n\r\n                <input type=\"button\" value=\"Open Reader\" id=\"openButton\" onclick=\"openButtonClicked()\" />\r\n                <input type=\"button\" value=\"Close Reader\" id=\"closeButton\" onclick=\"closeButtonClicked()\" disabled /><br/>\r\n\r\n                <input type=\"button\" value=\"Activate Reader\" id=\"activateButton\" onclick=\"activateButtonClicked()\" disabled />\r\n                <input type=\"button\" value=\"Deactivate Reader\" id=\"deactivateButton\" onclick=\"deactivateButtonClicked()\" disabled />\r\n                <input type=\"button\" value=\"Remove Listener\" id=\"addEventListenerButton\" onclick=\"addEventListenerButtonClicked()\" disabled />\r\n                <input type=\"button\" value=\"Disable Trigger\" id=\"enableTriggerButton\" onclick=\"enableTriggerButtonClicked()\" disabled />\r\n                <input type=\"button\" value=\"Clear log\" id=\"clearLogButton\" onclick=\"clearLogButtonClicked()\" />\r\n\r\n                <div>\r\n                    <b>Barcode Data Read</b><br />\r\n                    <label htmlFor=\"BarcodeData\">Data:</label>\r\n                    <input type=\"text\" id=\"BarcodeData\" size=\"20\" /><br />\r\n\r\n                    <label htmlFor=\"SymbType\">Symbology:</label>\r\n                    <input type=\"text\" id=\"SymbType\" size=\"16\" /><br />\r\n\r\n                    <label htmlFor=\"ReadTime\">Time:</label>\r\n                    <input type=\"text\" id=\"ReadTime\" size=\"24\" /><br />\r\n                </div>\r\n\r\n                <div><b>Log:</b></div>\r\n                <div id=\"logMsg\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <BarcodeReader />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}