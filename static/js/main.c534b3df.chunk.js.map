{"version":3,"sources":["index.js"],"names":["BarcodeReader","props","state","readers","barcodeReader","readerAutoClosed","hidden","visibilityChange","availableReaders","openButton","document","getElementById","closeButton","activateButton","deactivateButton","addEventListenerButton","enableTriggerButton","clearLogButton","logMessage","barcodeDataText","symbTypeText","readTimeText","this","setup","window","BarcodeReaders","result","onBarcodeReadersComplete","setState","webkitHidden","addEventListener","handleVisibilityChange","status","getAvailableBarcodeReaders","onGetAvailableBarcodeReadersComplete","message","updateUI","setBuffered","onSetBufferedComplete","commitBuffer","onCommitComplete","addRemoveBarcodeListener","onBeforeUnload","alert","family","key","option","resultArray","length","i","method","data","type","time","Object","assign","value","readerOpened","clearData","disabled","closeBarcodeReader","openBarcodeReader","scannerName","onBarcodeReaderComplete","isAutoClose","close","removeEventListener","readerSelect","options","selectedIndex","activateBarcodeReader","deactivateBarcodeReader","isAdd","enabled","enableTrigger","activate","onActivateComplete","onDeactivateComplete","added","onBarcodeDataReady","onEnableTriggerComplete","selectOptions","e","event","returnValue","className","htmlFor","id","onClick","openButtonClicked","closeButtonClicked","activateButtonClicked","deactivateButtonClicked","addEventListenerButtonClicked","enableTriggerButtonClicked","clearLogButtonClicked","size","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.c534b3df.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass BarcodeReader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            readers: null, \r\n            barcodeReader: null, \r\n            readerAutoClosed: false,\r\n            hidden: null, \r\n            visibilityChange: null,\r\n            availableReaders: null,\r\n            openButton: document.getElementById(\"openButton\"),\r\n            closeButton: document.getElementById(\"closeButton\"),\r\n            activateButton: document.getElementById(\"activateButton\"),\r\n            deactivateButton: document.getElementById(\"deactivateButton\"),\r\n            addEventListenerButton: document.getElementById(\"addEventListenerButton\"),\r\n            enableTriggerButton: document.getElementById(\"enableTriggerButton\"),\r\n            clearLogButton: document.getElementById(\"clearLogButton\"),\r\n            logMessage: \"\",\r\n            barcodeDataText: document.getElementById(\"BarcodeData\"),\r\n            symbTypeText: document.getElementById(\"SymbType\"),\r\n            readTimeText: document.getElementById(\"ReadTime\")\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setup();\r\n    }\r\n\r\n    setup() {\r\n        let readers = new window.BarcodeReaders((result) => this.onBarcodeReadersComplete(result));\r\n        this.setState({ readers: readers });\r\n\r\n        // Check whether the browser supports detection of the web page visibility.\r\n        if (typeof document.webkitHidden !== \"undefined\") { // Android 4.4 Chrome\r\n            this.setState({\r\n                hidden: \"webkitHidden\",\r\n                visibilityChange: \"webkitvisibilitychange\"\r\n            });\r\n        }\r\n        else if (typeof document.hidden !== \"undefined\") { // Standard HTML5 attribute\r\n            this.setState({\r\n                hidden: \"hidden\",\r\n                visibilityChange: \"visibilitychange\"\r\n            });\r\n        }\r\n\r\n        if (this.state.hidden && typeof document.addEventListener !== \"undefined\" &&\r\n            typeof document[this.state.hidden] !== \"undefined\") {\r\n            // Add an event listener for the visibility change of the web page.\r\n            document.addEventListener(this.state.visibilityChange, this.handleVisibilityChange, false);\r\n        }\r\n    }\r\n\r\n    onBarcodeReadersComplete(result) {\r\n        if (result.status === 0) {\r\n            this.state.readers.getAvailableBarcodeReaders((result) => this.onGetAvailableBarcodeReadersComplete(result));\r\n        }\r\n        else {\r\n            this.setState({\r\n                logMessage: \"<p style=\\\"color:red\\\">Failed to create BarcodeReaders, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n            })\r\n        }\r\n    }\r\n\r\n    // After BarcodeReader object is created we can configure our symbologies and add our event listener\r\n    onBarcodeReaderComplete(result) {\r\n        if (result.status === 0) {\r\n            // BarcodeReader object was successfully created\r\n            this.setState({\r\n                logMessage: \"BarcodeReader object successfully created\"\r\n            })\r\n            \r\n            this.updateUI(true, true);\r\n\r\n            // Configure the symbologies needed. Buffer the settings and commit them at once.\r\n            this.state.barcodeReader.setBuffered(\"Symbology\", \"Code39\", \"Enable\", \"true\", this.onSetBufferedComplete);\r\n            this.state.barcodeReader.setBuffered(\"Symbology\", \"Code128\", \"EnableCode128\", \"true\", this.onSetBufferedComplete);\r\n            this.state.barcodeReader.setBuffered(\"Symbology\", \"EANUPC\", \"EnableEAN13\", \"true\", this.onSetBufferedComplete);\r\n            this.state.barcodeReader.setBuffered(\"Symbology\", \"QRCode\", \"Enable\", \"true\", this.onSetBufferedComplete);\r\n\r\n            this.state.barcodeReader.commitBuffer(this.onCommitComplete);\r\n\r\n            // Add an event handler to receive barcode data\r\n            this.addRemoveBarcodeListener(true);\r\n            // Add an event handler for the window's beforeunload event\r\n            window.addEventListener(\"beforeunload\", this.onBeforeUnload);\r\n        }\r\n        else {\r\n            this.setState({\r\n                barcodeReader: null,\r\n                logMessage: this.state.logMessage + \r\n                    \"<p style=\\\"color:red\\\">Failed to create BarcodeReader, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n            })\r\n            \r\n            alert('Failed to create BarcodeReader, ' + result.message);\r\n        }\r\n    }\r\n\r\n    // Verify the symbology configuration\r\n    onSetBufferedComplete(result) {\r\n        if (result.status !== 0) {\r\n            this.setState({\r\n                logMessage: this.state.logMessage +\r\n                    \"<p style=\\\"color:red\\\">setBuffered failed, status: \" + result.status + \", message: \" + result.message + \"</p>\" +\r\n                    \"<p>Family=\" + result.family + \" Key=\" + result.key + \" Option=\" + result.option + \"</p>\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onCommitComplete(resultArray) {\r\n        if (resultArray.length > 0) {\r\n            for (var i = 0; i < resultArray.length; i++) {\r\n                var result = resultArray[i];\r\n                if (result.status !== 0) {\r\n                    this.setState({\r\n                        logMessage: this.state.logMessage +\r\n                            \"<p style=\\\"color:red\\\">commitBuffer failed, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n                    })\r\n                    \r\n                    if (result.method === \"getBuffered\" || result.method === \"setBuffered\") {\r\n                        this.setState({\r\n                            logMessage: this.state.logMessage +\r\n                                \"<p>Method=\" + result.method +\r\n                                \" Family=\" + result.family + \" Key=\" + result.key +\r\n                                \" Option=\" + result.option + \"</p>\"\r\n                        })\r\n                    }\r\n                }\r\n            } //endfor\r\n        }\r\n    }\r\n\r\n    // Handle barcode data when available\r\n    onBarcodeDataReady(data, type, time) {\r\n        this.setState({\r\n            barcodeDataText: Object.assign({}, this.state.barcodeDataText, {value: data}),\r\n            symbTypeText: Object.assign({}, this.state.symbTypeText, {value: type}),\r\n            readTimeText: Object.assign({}, this.state.readTimeText, {value: time})\r\n        })\r\n    }\r\n\r\n    updateUI(readerOpened, clearData) {\r\n        this.setState({\r\n            openButton: Object.assign({}, this.state.openButton, {disabled: readerOpened}),\r\n            closeButton: Object.assign({}, this.state.closeButton, {disabled: !readerOpened}),\r\n            activateButton: Object.assign({}, this.state.activateButton, {disabled: !readerOpened}),\r\n            deactivateButton: Object.assign({}, this.state.deactivateButton, {disabled: !readerOpened}),\r\n            addEventListenerButton: Object.assign({}, this.state.addEventListenerButton, {disabled: !readerOpened}),\r\n            enableTriggerButton: Object.assign({}, this.state.enableTriggerButton, {disabled: !readerOpened})\r\n        })\r\n\r\n        if (clearData) {\r\n            this.setState({\r\n                barcodeDataText: Object.assign({}, this.state.barcodeDataText, {value: \"\"}),\r\n                symbTypeText: Object.assign({}, this.state.symbTypeText, {value: \"\"}),\r\n                readTimeText: Object.assign({}, this.state.readTimeText, {value: \"\"})\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the browser supports visibility change event, we can close the\r\n     * BarcodeReader object when the web page is hidden and create a new\r\n     * instance of the BarcodeReader object when the page is visible. This\r\n     * logic is used to re-claim the barcode reader in case another\r\n     * application has claimed it when this page becomes hidden.\r\n     */\r\n    handleVisibilityChange() {\r\n        if (document[this.state.hidden]) // The web page is hidden\r\n        {\r\n            this.closeBarcodeReader(true);\r\n        }\r\n        else // The web page is visible\r\n        {\r\n            if (this.state.readerAutoClosed) {\r\n                // Note: If you switch to another tab and quickly switch back\r\n                // to the current tab, the following call may have no effect\r\n                // because the BarcodeReader may not be completely closed yet.\r\n                // Once the BarcodeReader is closed, you may use the Open Reader\r\n                // button to create a new BarcodeReader object.\r\n                this.openBarcodeReader();\r\n            }\r\n        }\r\n    }\r\n\r\n    openBarcodeReader(scannerName) {\r\n        if (!this.state.barcodeReader) {\r\n            this.setState({\r\n                barcodeReader: new BarcodeReader(scannerName, (result) => this.onBarcodeReaderComplete(result))\r\n            })\r\n        }\r\n    }\r\n\r\n    closeBarcodeReader(isAutoClose) {\r\n        if (this.state.barcodeReader) {\r\n            this.setState({ readerAutoClosed: isAutoClose });\r\n            this.state.barcodeReader.close(function (result) {\r\n                if (result.status === 0) {\r\n                    this.setState({\r\n                        barcodeReader: null,\r\n                        logMessage: this.state.logMessage +\r\n                            \"<p style=\\\"color:blue\\\">BarcodeReader successfully closed.</p>\"\r\n                    })\r\n                    \r\n                    this.updateUI(false, false);\r\n                    window.removeEventListener(\"beforeunload\");\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        logMessage: this.state.logMessage +\r\n                            \"<p style=\\\"color:red\\\">Failed to close BarcodeReader, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    openButtonClicked() {\r\n        var scannerName = this.state.readerSelect.options[this.state.readerSelect.selectedIndex].value;\r\n        if (scannerName !== \"None\") {\r\n            this.openBarcodeReader(scannerName);\r\n        }\r\n        else {\r\n            this.openBarcodeReader(null);\r\n        }\r\n    }\r\n\r\n    closeButtonClicked() {\r\n        this.closeBarcodeReader(false);\r\n    }\r\n\r\n    activateButtonClicked() {\r\n        this.activateBarcodeReader();\r\n    }\r\n\r\n    deactivateButtonClicked() {\r\n        this.deactivateBarcodeReader();\r\n    }\r\n\r\n    addEventListenerButtonClicked() {\r\n        var isAdd = this.state.addEventListenerButton.value === \"Remove Listener\" ? false : true;\r\n        this.addRemoveBarcodeListener(isAdd);\r\n    }\r\n\r\n    enableTriggerButtonClicked() {\r\n        var enabled = this.state.enableTriggerButton.value === \"Disable Trigger\" ? false : true;\r\n        this.enableTrigger(enabled);\r\n    }\r\n\r\n    clearLogButtonClicked() {\r\n        this.setState({\r\n            logMessage: \"\"\r\n        })\r\n    }\r\n\r\n    activateBarcodeReader() {\r\n        this.setState({\r\n            barcodeDataText: Object.assign({}, this.state.barcodeDataText, {value: \"\"}),\r\n            symbTypeText: Object.assign({}, this.state.symbTypeText, {value: \"\"}),\r\n            readTimeText: Object.assign({}, this.state.readTimeText, {value: \"\"})\r\n        })\r\n\r\n        // The following call should cause the aimer to light up\r\n        // and be ready to decode. This feature is often referred\r\n        // to as starting the software trigger.\r\n        this.state.barcodeReader.activate(true, this.onActivateComplete);\r\n    }\r\n\r\n    deactivateBarcodeReader() {\r\n        // The following call should deactivate the aimer. This is\r\n        // often referred to as stopping the software trigger.\r\n        this.state.barcodeReader.activate(false, this.onDeactivateComplete);\r\n    }\r\n\r\n    addRemoveBarcodeListener(added) {\r\n        if (added) {\r\n            // Add an event handler for the barcodedataready event\r\n            this.state.barcodeReader.addEventListener(\"barcodedataready\", this.onBarcodeDataReady, false);\r\n\r\n            this.setState({\r\n                addEventListenerButton: Object.assign({}, this.state.addEventListenerButton, {value: \"Remove Listener\"}),\r\n                logMessage: this.state.logMessage +\r\n                    \"<br>Added an event handler for the barcodedataready event.\"\r\n            })\r\n        }\r\n        else {\r\n            // Remove an event handler for the barcodedataready event\r\n            this.state.barcodeReader.removeEventListener(\"barcodedataready\", this.onBarcodeDataReady);\r\n            \r\n            this.setState({\r\n                addEventListenerButton: Object.assign({}, this.state.addEventListenerButton, {value: \"Add Listener\"}),\r\n                logMessage: this.state.logMessage +\r\n                    \"<br>Removed the event handler for the barcodedataready event.\"\r\n            })\r\n        }\r\n    }\r\n\r\n    // Enables or disables the hardware trigger (scan) button. The user\r\n    // will not be able to press the scan button to scan if it is disabled.\r\n    enableTrigger(enabled) {\r\n        this.state.barcodeReader.enableTrigger(enabled, this.onEnableTriggerComplete);\r\n    }\r\n\r\n    onGetAvailableBarcodeReadersComplete(result) {\r\n        if (result.length !== 0) {\r\n            var selectOptions;\r\n            for (var i = 0; i < result.length; i++) {\r\n                selectOptions += \"<option value=\\\"\" + result[i] + \"\\\">\" + result[i] + \"</option>\";\r\n            }\r\n            this.setState({availableReaders: selectOptions});\r\n        }\r\n    }\r\n\r\n    onActivateComplete(result) {\r\n        if (result.status !== 0) {\r\n            this.setState({\r\n                logMessage: this.state.logMessage +\r\n                    \"<p style=\\\"color:red\\\">BarcodeReader activate failed, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onDeactivateComplete(result) {\r\n        if (result.status !== 0) {\r\n            this.setState({\r\n                logMessage: this.state.logMessage +\r\n                    \"<p style=\\\"color:red\\\">BarcodeReader deactivate failed, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n            })\r\n        }\r\n    }\r\n\r\n    onEnableTriggerComplete(result) {\r\n        if (result.status !== 0) {\r\n            this.setState({\r\n                logMessage: this.state.logMessage +\r\n                    \"<p style=\\\"color:red\\\">BarcodeReader enableTrigger failed, status: \" + result.status + \", message: \" + result.message + \"</p>\"\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableTriggerButton: Object.assign(\r\n                    {}, \r\n                    this.state.enableTriggerButton, \r\n                    {\r\n                        value: this.state.enableTriggerButton.value === \"Disable Trigger\" ? \"Enable Trigger\" : \"Disable Trigger\"\r\n                    })\r\n            });\r\n        }\r\n    }\r\n\r\n    onBeforeUnload(e) {\r\n        var message = \"Please close BarcodeReader before leaving this page.\";\r\n        (e || window.event).returnValue = message;\r\n        return message;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"barcode-reader\">\r\n                <h3>BarcodeReader API Demo</h3>\r\n\r\n                <label htmlFor=\"readerSelect\">Readers:</label>\r\n                <select id=\"readerSelect\">\r\n                    <option value=\"None\">Select a reader</option>\r\n                    {this.state.availableReaders}\r\n                </select>\r\n                <br />\r\n\r\n                <input type=\"button\" value=\"Open Reader\" id=\"openButton\" onClick={this.openButtonClicked} />\r\n                <input type=\"button\" value=\"Close Reader\" id=\"closeButton\" onClick={this.closeButtonClicked} disabled /><br />\r\n\r\n                <input type=\"button\" value=\"Activate Reader\" id=\"activateButton\" onClick={this.activateButtonClicked} disabled />\r\n                <input type=\"button\" value=\"Deactivate Reader\" id=\"deactivateButton\" onClick={this.deactivateButtonClicked} disabled />\r\n                <input type=\"button\" value=\"Remove Listener\" id=\"addEventListenerButton\" onClick={this.addEventListenerButtonClicked} disabled />\r\n                <input type=\"button\" value=\"Disable Trigger\" id=\"enableTriggerButton\" onClick={this.enableTriggerButtonClicked} disabled />\r\n                <input type=\"button\" value=\"Clear log\" id=\"clearLogButton\" onClick={this.clearLogButtonClicked} />\r\n\r\n                <div>\r\n                    <b>Barcode Data Read</b><br />\r\n                    <label htmlFor=\"BarcodeData\">Data:</label>\r\n                    <input type=\"text\" id=\"BarcodeData\" size=\"20\" /><br />\r\n\r\n                    <label htmlFor=\"SymbType\">Symbology:</label>\r\n                    <input type=\"text\" id=\"SymbType\" size=\"16\" /><br />\r\n\r\n                    <label htmlFor=\"ReadTime\">Time:</label>\r\n                    <input type=\"text\" id=\"ReadTime\" size=\"24\" /><br />\r\n                </div>\r\n\r\n                <div><b>Log:</b></div>\r\n                <div id=\"logMsg\">{this.state.logMessage}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <BarcodeReader />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}